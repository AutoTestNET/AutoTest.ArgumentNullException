<?xml version="1.0" encoding="utf-8"?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <Import Project="ExecuteXUnitTests.targets"/>

  <ItemGroup>
    <XUnitRunnerExePathGroup Condition="'$(XUnitRunnerExePath)'==''" Include="$(WorkingDir)\packages\xunit.runner.console*\**\xunit.console.exe" />
    <OpenCoverExePathGroup Condition="'$(OpenCoverExePath)'==''" Include="$(WorkingDir)\packages\**\OpenCover.Console.exe" />
    <ReportGeneratorExePathGroup Condition="'$(ReportGeneratorExePath)'==''" Include="$(WorkingDir)\packages\**\ReportGenerator.exe" />
  </ItemGroup>

  <PropertyGroup>
    <XUnitRunnerExePath Condition="'$(XUnitRunnerExePath)'==''">@(XUnitRunnerExePathGroup)</XUnitRunnerExePath>
    <OpenCoverExePath Condition="'$(OpenCoverExePath)'==''">@(OpenCoverExePathGroup)</OpenCoverExePath>
    <ReportGeneratorExePath Condition="'$(ReportGeneratorExePath)'==''">@(ReportGeneratorExePathGroup)</ReportGeneratorExePath>
    <CoverageFilter Condition="'$(CoverageFilter)'==''">+[*]*</CoverageFilter>
    <CoverageReportFolder Condition="'$(CoverageReportFolder)'==''">$(OutputPath)\Report</CoverageReportFolder>
  </PropertyGroup>

  <!--
  Target to test whether the necessary properties have been predefined for generating the version file(s).
  -->
  <Target Name="TestExecuteCoverageProperties">

    <!-- Do the error checking to ensure the appropriate items are defined.-->
    <Error Condition="'$(XUnitRunnerExePath)'==''" Text="XUnitRunnerExePath is not defined."/>
    <Error Condition="!Exists('$(XUnitRunnerExePath)')" Text="'$(XUnitRunnerExePath)' does not exist."/>
    <Error Condition="'$(OpenCoverExePath)'==''" Text="OpenCoverExePath is not defined."/>
    <Error Condition="!Exists('$(OpenCoverExePath)')" Text="'$(OpenCoverExePath)' does not exist."/>
    <Error Condition="'$(ReportGeneratorExePath)'==''" Text="ReportGeneratorExePath is not defined."/>
    <Error Condition="!Exists('$(ReportGeneratorExePath)')" Text="'$(ReportGeneratorExePath)' does not exist."/>
    <Error Condition="'$(CoverageFilter)'==''" Text="CoverageFilter is not defined."/>
    <Error Condition="'$(CoverageReportFolder)'==''" Text="CoverageReportFolder is not defined."/>

    <Message Text="ExecuteUnitTestsOpenCover.targets Properties:-" />
    <Message Text="XUnitRunnerExePath: '$(XUnitRunnerExePath)'" />
    <Message Text="OpenCoverExePath: '$(OpenCoverExePath)'" />
    <Message Text="ReportGeneratorExePath: '$(ReportGeneratorExePath)'" />
    <Message Text="CoverageFilter: '$(CoverageFilter)'" />
    <Message Text="CoverageReportFolder: '$(CoverageReportFolder)'" />
  </Target>

  <!--
  Executes the unit tests with xUnit through OpenCover.
  -->
  <Target Name="CoreExecuteUnitTestsOpenCover"
          Inputs="@(TestAssemblies)"
          Outputs="$(OutputPath)\Combined.Tests.html"
          DependsOnTargets="GetXUnitTestAssemblies"
          Condition="$(ExcludeOpenCoverTests) != 'True'">

    <MakeDir Directories="$(OutputPath)" />

    <PropertyGroup>
      <XUnitRunnerArguments>@(TestAssemblies->'%(FullPath)',' ') -noshadow -html $(OutputPath)\Combined.Tests.html</XUnitRunnerArguments>
      <OpenCoverCommand>"$(OpenCoverExePath)" -register:user "-target:$(XUnitRunnerExePath)" "-targetargs:$(XUnitRunnerArguments)" "-filter:$(CoverageFilter)" "-output:$(OutputPath)\Combined.Tests.Coverage.xml"</OpenCoverCommand>
    </PropertyGroup>

    <Exec Command="$(OpenCoverCommand)" />
  </Target>

  <!--
  Gets the list of assemblies to be tested.
  -->
  <Target Name="GetCoverageResultFiles">
    <CreateItem Include="$(OutputPath)\*.Coverage.xml">
      <Output TaskParameter="Include" ItemName="CoverageResultFiles"/>
    </CreateItem>
    <Message Text="Coverage result files:-" Importance="high" />
    <Message Text="%(CoverageResultFiles.FullPath)" Importance="high" />
  </Target>

  <!--
  Generates the coverage report.
  -->
  <Target Name="CoreGenerateCoverReport"
          Inputs="@(CoverageResultFiles)"
          Outputs="$(OutputPath)\index.htm"
          DependsOnTargets="GetCoverageResultFiles">

    <PropertyGroup>
      <ReportGeneratorSummaryCommand>"$(ReportGeneratorExePath)" -verbosity:Error "-reports:$(OutputPath)\*.Coverage.xml" "-targetdir:$(OutputPath)\" -reporttypes:XmlSummary</ReportGeneratorSummaryCommand>
      <ReportGeneratorFullCommand>"$(ReportGeneratorExePath)" -verbosity:Error "-reports:$(OutputPath)\*.Coverage.xml" "-targetdir:$(CoverageReportFolder)" -reporttypes:Html</ReportGeneratorFullCommand>
    </PropertyGroup>

    <Exec Command="$(ReportGeneratorSummaryCommand)" />
    <Exec Command="$(ReportGeneratorFullCommand)" />
  </Target>

  <!--
  Property group to define the dependencies of ExecuteUnitTests target
  -->
  <PropertyGroup>
    <ExecuteUnitTestsDependsOn>
      TestExecuteXUnitTestsProperties;
      TestExecuteCoverageProperties;
      CoreExecuteXUnitTests;
      CoreExecuteUnitTestsOpenCover;
      CoreGenerateCoverReport;
    </ExecuteUnitTestsDependsOn>
  </PropertyGroup>

  <!--
  Target to test whether the necessary properties have been predefined for executing the unit tests.
  -->
  <Target Name="TestCleanCoverageResultFilesProperties">

    <!-- Do the error checking to ensure the appropriate items are defined.-->
    <Error Condition="'$(CoverageReportFolder)'==''" Text="CoverageReportFolder is not defined."/>
    <Error Condition="'$(OutputPath)'==''" Text="OutputPath is not defined."/>

    <Message Text="ExecuteUnitTestsOpenCover.targets Properties:-" />
    <Message Text="CoverageReportFolder: '$(CoverageReportFolder)'" />
    <Message Text="OutputPath: '$(OutputPath)'" />
  </Target>

  <!-- Cleans all the generated files.  -->
  <Target Name="CoreCleanCoverageResultFiles">
    <Message Text="Deleting test result files '$(OutputPath)*.xml'." Importance="high" />

    <Delete Files="$(CoverageReportFolder)\*.*" />
    <Delete Files="$(OutputPath)\*.*" />
    <RemoveDir Directories="$(CoverageReportFolder)" />
    <RemoveDir Directories="$(OutputPath)" />
  </Target>

  <!--
  Property group to define the dependencies of CleanTestResultFiles target
  -->
  <PropertyGroup>
    <CleanTestResultFilesDependsOn>
      TestCleanCoverageResultFilesProperties;
      CoreCleanCoverageResultFiles;
      $(CleanTestResultFilesDependsOn);
    </CleanTestResultFilesDependsOn>
  </PropertyGroup>

</Project>
